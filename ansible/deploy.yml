---
- name: Deploy FFMPEG and NGINX through Docker Compose
  hosts: webservers
  become: yes
  
  vars:
    app_directory: /home/ffmpeg-app
    docker_compose_version: "2.23.0"
  
  tasks:
    - name: Update APT cache
      apt:
        update_cache: yes
        cache_valid_time: 1800

    - name: Install required system packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Create application directory
      file:
        path: "{{ app_directory }}"
        state: directory
        mode: '0755'

    - name: Copy application files to remote host
      copy:
        src: "../app/{{ item }}"
        dest: "{{ app_directory }}/{{ item }}"
        mode: '0644'
      loop:
        - Dockerfile
        - docker-compose.yaml
        - index.html
        - ffmpeg-lastframe.sh

    - name: Make ffmpeg script executable
      file:
        path: "{{ app_directory }}/ffmpeg-lastframe.sh"
        mode: '0755'

    - name: Stop existing Docker Compose services
      command: docker-compose down
      args:
        chdir: "{{ app_directory }}"
      ignore_errors: yes

    - name: Build and start Docker Compose services
      command: docker-compose up -d --build
      args:
        chdir: "{{ app_directory }}"

    - name: Wait for application to be ready on port 80
      wait_for:
        port: 80
        delay: 5
        timeout: 60